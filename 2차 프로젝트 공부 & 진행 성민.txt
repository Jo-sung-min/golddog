1.먼저 DB를 짠다.
2. domain 에서 VO 즉 DTO 를 작성한다.
3. controller(class)	> service(interface) > serviceImpl(class) > persistence(interface) > mapper(xml)
   @controller	  		   @service		
순으로 작성한다.
 
4.@controller , @service 는 객체생성해주는 아이들이므로 root 에서 스캔해주는 절차가 필요하다. (bean으로 등록) 객체생성 이라고 말한다.





root-context.xml 세팅법
커넥션 풀 세팅
	먼저 DB 연동을 위해 마이바티스 라이브러리를 pom.xml 에 추가 후 클래스를 불러와 아이디와 세부 파라미터를 수정한다.

	3.집에서 쓰는 아이디와 비번
	<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
		<property name="driverClassName" value="net.sf.log4jdbc.sql.jdbcapi.DriverSpy" /> 
		<property name="jdbcUrl" value="jdbc:log4jdbc:oracle:thin:@192.168.50.195:1521:ORCL" />
		<property name="username" value="c##java01" />
		<property name="password" value="java01" />
	</bean>
	
	2.알아서 다쓰면 close 까지 설정해놓기
	<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
		<constructor-arg ref="hikariConfig" />
	</bean>

	 1.DB 연동위해 마이바티스 라이브러리 추가
	<!--  MyBatis 연동 설정  -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
	</bean>


--------------------------------------------------------------------------------------------------------------------------------------------
<!-- Mapper 스캔하도록 설정 --> @controller , @service 같은애들 빈으로 등록시켜주는 xml 문
	<mybatis-spring:scan base-package="com.goldDog.persistence"/> @controller
	<context:component-scan base-package="com.goldDog.service" /> @service	 